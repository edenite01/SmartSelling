# -*- coding: utf-8 -*-
"""Copy of Copy of Copy of Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bpP_1WrMjDJHxUyiBxw-B2SmSB337nZd
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

customers_df = pd.read_csv('/content/drive/MyDrive/mini/Mall_Customers.csv',encoding='latin-1')

"""# New Section"""

customers_df.head()

customers_df.describe()

customers_df.rename(columns={'Genre':'Gender'},inplace=True)
customers_df.head()

customers_df.shape

#customers_df.drop(["CustomerID"],axis=1, inplace = True)
customers_df.head()

def Dataset():
  import pandas as pd
  import numpy as np
  import matplotlib.pyplot as plt
  import seaborn as sns
  customers_df.rename(columns={'Genre':'Gender'},inplace=True)
  return customers_df
print(Dataset())

#DISTRIBUTION PLOTS OF AGE, ANNUAL INCOME , SPENDING SCORE
plt.figure(1,figsize = (15,16))
n = 0
for x in ['Age' , 'Annual Income (k$)', 'Spending Score (1-100)']:
  n += 1
  plt.subplot(1,3,n)
  plt.subplots_adjust(hspace=0.5 , wspace= 0.5)
  sns.distplot(customers_df[x],bins = 20 )
  plt.title('displot of {}'.format(x))
plt.show()

age_18_25 = customers_df.Age[(customers_df.Age >= 18) & (customers_df.Age <= 25)]
age_26_35 = customers_df.Age[(customers_df.Age >= 26) & (customers_df.Age <= 35)]
age_36_45 = customers_df.Age[(customers_df.Age >= 36) & (customers_df.Age <= 45)]
age_46_55 = customers_df.Age[(customers_df.Age >= 46) & (customers_df.Age <= 55)]
age_55above = customers_df.Age[(customers_df.Age >= 56)]
agex = ["18-25","26-35","36-45","46-55","55+"]
agey = [len(age_18_25.values),len(age_26_35.values),len(age_36_45.values),len(age_46_55.values),len(age_55above.values)]
plt.figure(figsize=(15,6))
sns.barplot(x=agex , y=agey , palette="mako")
plt.title("customer and ages")
plt.xlabel("Age")
plt.ylabel("No of customers")
plt.show()

ss_1_20 = customers_df["Spending Score (1-100)"][(customers_df["Spending Score (1-100)"] >= 1) & (customers_df["Spending Score (1-100)"] <= 20)]
ss_21_40 = customers_df["Spending Score (1-100)"][(customers_df["Spending Score (1-100)"] >= 21) & (customers_df["Spending Score (1-100)"] <= 40)]
ss_41_60 = customers_df["Spending Score (1-100)"][(customers_df["Spending Score (1-100)"] >= 41) & (customers_df["Spending Score (1-100)"] <= 60)]
ss_61_80 = customers_df["Spending Score (1-100)"][(customers_df["Spending Score (1-100)"] >= 61) & (customers_df["Spending Score (1-100)"] <= 80)]
ss_81_100 = customers_df["Spending Score (1-100)"][(customers_df["Spending Score (1-100)"] >= 81) & (customers_df["Spending Score (1-100)"] <= 100)]
ssx = ["1-20","21-40","41-60","61-80","81-100"]
ssy = [len(ss_1_20.values),len(ss_21_40.values),len(ss_41_60.values),len(ss_61_80.values),len(ss_81_100.values)]
plt.figure(figsize=(15,6))
sns.barplot(x=ssx , y=ssy , palette="mako")
plt.title("customer and spending scores")
plt.xlabel("Spending score")
plt.ylabel("No of customers")
plt.show()

X1 = customers_df.loc[:,["Age","Spending Score (1-100)"]].values
#print(X1)
from sklearn.cluster import KMeans
wcss =[]
for k in range(1,11):
  kmeans = KMeans(n_clusters = k, init = "k-means++")
  kmeans.fit(X1)
  wcss.append(kmeans.inertia_)
#print(wcss)
plt.figure(figsize=(12,6))
plt.grid()
plt.plot(range(1,11),wcss, linewidth = 2, color = "red" , marker ="8")
plt.xlabel("k value")
plt.ylabel("WCSS")
plt.show()

kmeans = KMeans(n_clusters = 4 )
label = kmeans.fit_predict(X1)
print(label)

kmeans_cluster_centers = kmeans.cluster_centers_
print(kmeans.cluster_centers_)

def kmeanClusters():
  customers_df = Dataset()
  X1 = customers_df.loc[:,["Age","Spending Score (1-100)"]].values
  #print(X1)
  from sklearn.cluster import KMeans
  wcss =[]
  for k in range(1,11):
    kmeans = KMeans(n_clusters = k, init = "k-means++")
    kmeans.fit(X1)
    wcss.append(kmeans.inertia_)
  kmeans = KMeans(n_clusters = 4 )
  label = kmeans.fit_predict(X1)
  return kmeans.cluster_centers_
print(kmeanClusters())

plt.scatter(X1[:,0] , X1[:,1] , c= kmeans.labels_ , cmap = 'rainbow')
plt.scatter(kmeans_cluster_centers[:,0] , kmeans_cluster_centers[:,1] , color = 'black')
plt.title('Clusters of customers')
plt.xlabel('Age')
plt.ylabel('Spending score')
plt.show()

kmc = kmeans_cluster_centers
kmc[3][1]

kmc = kmeans_cluster_centers
list1 = []
list2 = []
for i in range(len(kmc)-1):
  for j in range(i+1,4):
    x = abs(kmc[i][0] - kmc[j][0])
    y = abs(kmc[i][1] - kmc[j][1])
    if x < 2 or y < 2 :
      list2.append((kmc[i][0],kmc[i][1]))
      list2.append((kmc[j][0],kmc[j][1]))
      a,b = i,j
print("list2 is:")
print(a,b)
for i in range(len(kmc)-1):
  for j in range(i+1,4):
    if i == a or j==b or i==b or j==a :
      continue
    else:
      print(i,j)
      list2.append((kmc[i][0],kmc[i][1]))
      list2.append((kmc[j][0],kmc[j][1]))
print(list2)
print(len(list2))

def similarCentroids():
  kmc = kmeanClusters()
  list1 = []
  list2 = []
  for i in range(len(kmc)-1):
    for j in range(i+1,4):
      x = abs(kmc[i][0] - kmc[j][0])
      y = abs(kmc[i][1] - kmc[j][1])
      if x < 2 or y < 2 :
        list2.append((kmc[i][0],kmc[i][1]))
        list2.append((kmc[j][0],kmc[j][1]))
        a,b = i,j
  #print("list2 is:")
  #print(a,b)
  for i in range(len(kmc)-1):
    for j in range(i+1,4):
      if i == a or j==b or i==b or j==a :
        continue
      else:
        #print(i,j)
        list2.append((kmc[i][0],kmc[i][1]))
        list2.append((kmc[j][0],kmc[j][1]))
  return list2
print(similarCentroids())

def euclidean_dist(list1):
  import numpy as np
  point1 = np.array(list1[0])
  point2 = np.array(list1[1])
  sum_sq = np.sum(np.square(point1 - point2))
  dist = np.sqrt(sum_sq)
  return dist
list1 = [(3,4),(4,5)]
print(euclidean_dist(list1))

#To find clusters we need to consider the minimum radii,the minimum radii is considered by the average of 
#distance between the similar centroid points which lie almost on a similar line
import itertools
cluster1_dist = euclidean_dist(list2[:2])
#print(cluster1_dist)
cluster2_dist = euclidean_dist(list2[2:])
#print(cluster2_dist)
min_radii_cl1 = (cluster1_dist//2)
cl1 = []
cl2 = []
for i in X1:
  lis = []
  lis.append(i)
  lis.append(list2[0])
  if (euclidean_dist(lis)) <= min_radii_cl1 :
    cl1.append(list(i))
  else:
    lis = []
    lis.append(i)
    lis.append(list2[1])
    if (euclidean_dist(lis)) <= min_radii_cl1 :
      cl2.append(list(i))
print("cluster1 elements")
#for j in cl1:
 # print(j)
print(len(cl1))
print("cluster2 elements")
#for j in cl2:
 #print(j)
print(len(cl2))
min_radii_cl2 = (cluster2_dist//2)
cl3 = []
cl4 = []
for i in X1:
  lis = []
  lis.append(i)
  lis.append(list2[2])
  if (euclidean_dist(lis)) <= min_radii_cl2 :
    if (list(i) not in cl1) and (list(i) not in cl2) :
      cl3.append(i)
  else:
    lis = []
    lis.append(i)
    lis.append(list2[3])
    if (euclidean_dist(lis)) <= min_radii_cl2 :
      if (list(i) not in cl1) and (list(i) not in cl2) :
        cl4.append(i)
print("length of cluster3 elements")
print(len(cl3))
print("length of cluster4 elements")
print(len(cl4))

def allClustersElements():
  customers_df = Dataset()
  X1 = customers_df.loc[:,["Age","Spending Score (1-100)"]].values
  list2 = similarCentroids()
  import itertools
  cluster1_dist = euclidean_dist(list2[:2])
  cluster2_dist = euclidean_dist(list2[2:])
  min_radii_cl1 = (cluster1_dist//2)
  cl1 = []
  cl2 = []
  for i in X1:
    lis = []
    lis.append(i)
    lis.append(list2[0])
    if (euclidean_dist(lis)) <= min_radii_cl1 :
      cl1.append(list(i))
    else:
      lis = []
      lis.append(i)
      lis.append(list2[1])
      if (euclidean_dist(lis)) <= min_radii_cl1 :
        cl2.append(list(i))
  min_radii_cl2 = (cluster2_dist//2)
  cl3 = []
  cl4 = []
  for i in X1:
    lis = []
    lis.append(i)
    lis.append(list2[2])
    if (euclidean_dist(lis)) <= min_radii_cl2 :
      if (list(i) not in cl1) and (list(i) not in cl2) :
        cl3.append(i)
    else:
      lis = []
      lis.append(i)
      lis.append(list2[3])
      if (euclidean_dist(lis)) <= min_radii_cl2 :
        if (list(i) not in cl1) and (list(i) not in cl2) :
          cl4.append(i)
  return [cl1,cl2,cl3,cl4]
lis = allClustersElements()
for i in lis:
  print(i)
  print(len(i))

from pandas import DataFrame
cl1_df = []
cl1_emails = []
cl1_products = []
cl1IDS = []
for ind in customers_df.index:
  for j in cl1:
    if (j[0] == customers_df['Age'][ind]) and (j[1] == customers_df['Spending Score (1-100)'][ind]):
      cl1_df.append([customers_df['CustomerID'][ind],customers_df['Age'][ind],customers_df['Annual Income (k$)'][ind],customers_df['Spending Score (1-100)'][ind],customers_df['Gender'][ind],customers_df['Email'][ind],customers_df['Products'][ind]])
      cl1_emails.append(customers_df['Email'][ind])
      cl1IDS.append(customers_df['CustomerID'][ind])
      cl1_products.append(customers_df['Products'][ind])
      break
print(cl1_emails)
ucl1_pro = list(set(cl1_products))
proCount = []
for i in ucl1_pro:
  proCount.append(cl1_products.count(i))
print(proCount)
print(ucl1_pro)
fig = plt.figure(figsize =(10, 7))
plt.pie(proCount, labels = ucl1_pro)
plt.show()
cluster1df = DataFrame (cl1_df,columns=['CustomerID','Age','Annual Income (k$)','Spending Score (1-100)','Gender','Email','Products'])
cluster1df
print(cl1IDS)
print(len(cl1IDS))

from pandas import DataFrame
cl2_df = []
cl2_emails = []
cl2_products = []
cl2IDS = []
for ind in customers_df.index:
  for j in cl2:
    if (j[0] == customers_df['Age'][ind]) and (j[1] == customers_df['Spending Score (1-100)'][ind]):
      cl2_df.append([customers_df['CustomerID'][ind],customers_df['Age'][ind],customers_df['Annual Income (k$)'][ind],customers_df['Spending Score (1-100)'][ind],customers_df['Gender'][ind],customers_df['Email'][ind],customers_df['Products'][ind]])
      cl2_emails.append(customers_df['Email'][ind])
      cl2IDS.append(customers_df['CustomerID'][ind])
      cl2_products.append(customers_df['Products'][ind])
      break
print(cl2_emails)
ucl2_pro = list(set(cl2_products))
proCount = []
for i in ucl2_pro:
  proCount.append(cl2_products.count(i))
print(proCount)
print(ucl2_pro)
fig = plt.figure(figsize =(10, 7))
plt.pie(proCount, labels = ucl2_pro)
plt.show()
cluster2df = DataFrame (cl1_df,columns=['CustomerID','Age','Annual Income (k$)','Spending Score (1-100)','Gender','Email','Products'])
cluster2df
print(cl2IDS)
print(len(cl2IDS))

from pandas import DataFrame
cl3_df = []
cl3_emails = []
cl3_products = []
cl3IDS = []
for ind in customers_df.index:
  for j in cl3:
    if (j[0] == customers_df['Age'][ind]) and (j[1] == customers_df['Spending Score (1-100)'][ind]):
      cl3_df.append([customers_df['CustomerID'][ind],customers_df['Age'][ind],customers_df['Annual Income (k$)'][ind],customers_df['Spending Score (1-100)'][ind],customers_df['Gender'][ind],customers_df['Email'][ind],customers_df['Products'][ind]])
      cl3_emails.append(customers_df['Email'][ind])
      cl3IDS.append(customers_df['CustomerID'][ind])
      cl3_products.append(customers_df['Products'][ind])
      break
print(cl3_emails)
ucl3_pro = list(set(cl3_products))
proCount = []
for i in ucl3_pro:
  proCount.append(cl3_products.count(i))
print(proCount)
print(ucl3_pro)
fig = plt.figure(figsize =(10, 7))
plt.pie(proCount, labels = ucl3_pro)
plt.show()
cluster3df = DataFrame (cl3_df,columns=['CustomerID','Age','Annual Income (k$)','Spending Score (1-100)','Gender','Email','Products'])
#cluster3df
print(cl3IDS)

from pandas import DataFrame
cl4_df = []
cl4_emails = []
cl4_products = []
cl4IDS = []
for ind in customers_df.index:
  for j in cl4:
    if (j[0] == customers_df['Age'][ind]) and (j[1] == customers_df['Spending Score (1-100)'][ind]):
      cl4_df.append([customers_df['CustomerID'][ind],customers_df['Age'][ind],customers_df['Annual Income (k$)'][ind],customers_df['Spending Score (1-100)'][ind],customers_df['Gender'][ind],customers_df['Email'][ind],customers_df['Products'][ind]])
      cl4_emails.append(customers_df['Email'][ind])
      cl4IDS.append(customers_df['CustomerID'][ind])
      cl4_products.append(customers_df['Products'][ind])
      break
print(cl4_emails)
ucl4_pro = list(set(cl4_products))
proCount = []
for i in ucl4_pro:
  proCount.append(cl4_products.count(i))
print(proCount)
print(ucl4_pro)
fig = plt.figure(figsize =(10, 7))
plt.pie(proCount, labels = ucl4_pro)
plt.show()
cluster4df = DataFrame (cl4_df,columns=['CustomerID','Age','Annual Income (k$)','Spending Score (1-100)','Gender','Email','Products'])
#cluster3df
print(cl4IDS)
print(len(cl4IDS))

#pip install email

def allClustersData():
  from pandas import DataFrame
  import pandas as pd
  customers_df = Dataset()
  lists = allClustersElements()
  cl1,cl2,cl3,cl4 = lists[0],lists[1],lists[2],lists[3]
  cl1_df = []
  for ind in customers_df.index:
    for j in cl1:
      if (j[0] == customers_df['Age'][ind]) and (j[1] == customers_df['Spending Score (1-100)'][ind]):
        cl1_df.append([customers_df['CustomerID'][ind],customers_df['Age'][ind],customers_df['Annual Income (k$)'][ind],customers_df['Spending Score (1-100)'][ind],customers_df['Gender'][ind],customers_df['Email'][ind],customers_df['Products'][ind]])
        break
  cluster1df = pd.DataFrame(cl1_df,columns = ['CustomerID','Age','Annual Income (k$)','Spending Score (1-100)','Gender','Email','Products'])
  cl2_df = []
  for ind in customers_df.index:
    for j in cl2:
      if (j[0] == customers_df['Age'][ind]) and (j[1] == customers_df['Spending Score (1-100)'][ind]):
        cl2_df.append([customers_df['CustomerID'][ind],customers_df['Age'][ind],customers_df['Annual Income (k$)'][ind],customers_df['Spending Score (1-100)'][ind],customers_df['Gender'][ind],customers_df['Email'][ind],customers_df['Products'][ind]])
        break
  cluster2df = pd.DataFrame(cl2_df,columns = ['CustomerID','Age','Annual Income (k$)','Spending Score (1-100)','Gender','Email','Products'])
  cl3_df = []
  for ind in customers_df.index:
    for j in cl3:
      if (j[0] == customers_df['Age'][ind]) and (j[1] == customers_df['Spending Score (1-100)'][ind]):
        cl3_df.append([customers_df['CustomerID'][ind],customers_df['Age'][ind],customers_df['Annual Income (k$)'][ind],customers_df['Spending Score (1-100)'][ind],customers_df['Gender'][ind],customers_df['Email'][ind],customers_df['Products'][ind]])
        break
  cluster3df = pd.DataFrame(cl3_df,columns = ['CustomerID','Age','Annual Income (k$)','Spending Score (1-100)','Gender','Email','Products'])
  cl4_df = []
  for ind in customers_df.index:
    for j in cl4:
      if (j[0] == customers_df['Age'][ind]) and (j[1] == customers_df['Spending Score (1-100)'][ind]):
        cl4_df.append([customers_df['CustomerID'][ind],customers_df['Age'][ind],customers_df['Annual Income (k$)'][ind],customers_df['Spending Score (1-100)'][ind],customers_df['Gender'][ind],customers_df['Email'][ind],customers_df['Products'][ind]])
        break
  cluster4df = pd.DataFrame(cl4_df,columns = ['CustomerID','Age','Annual Income (k$)','Spending Score (1-100)','Gender','Email','Products'])

  return [cluster1df,cluster2df,cluster3df,cluster4df]
df = allClustersData()
for i in df:
  print(i['Email'].tolist())



"""# New Section"""

def sendingEmail(lists):
  import smtplib
  list1 = list(set(lists))
  list2 = []
  list1 = [str(x) for x in list1]
  list1 = [x for x in list1 if x != 'nan']
  for i in list1:
      if '@' in i:
          list2.append(i)
  li = list2 #list of receiver emails
  for dest in li:
    s = smtplib.SMTP('smtp.gmail.com', 587)
    s.starttls()
    s.login("lucymissionhale@gmail.com", "LucyMissionHale")#sender email
    message = "Flat 20% off on Decorative Items in our Super Market. Please avail the mall to avail and benefit the offers.\n.Thankyou"
    s.sendmail("lucymissionhale@gmail.com", dest, message)
    s.quit()
  return "Email Sent Successfully"

def sendingEmail_C1_new(em):
    import smtplib
    import imghdr
    from email.message import EmailMessage

    Sender_Email = "lucymissionhale@gmail.com"
    Reciever_Email = em
    Password = "LucyMissionHale"

    newMessage = EmailMessage()                         
    newMessage['Subject'] = "Check out the new offers" 
    newMessage['From'] = Sender_Email                   
    newMessage['To'] = Reciever_Email                   
    newMessage.set_content("Flat 50% off on Decorative Items. Hurry up! Avail the offers.\nThank you") 

    with open('/content/drive/MyDrive/Colab Notebooks/Decor.jpeg', 'rb') as f:
        image_data = f.read()
        image_type = imghdr.what(f.name)
        image_name = f.name

    newMessage.add_attachment(image_data, maintype='image', subtype=image_type, filename=image_name)

    with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
    
        smtp.login(Sender_Email, Password)              
        smtp.send_message(newMessage)

def sendingEmail_C2_new(em):
    import smtplib
    import imghdr
    from email.message import EmailMessage

    Sender_Email = "lucymissionhale@gmail.com"
    Reciever_Email = em
    Password = "LucyMissionHale"

    newMessage = EmailMessage()                         
    newMessage['Subject'] = "Check out the new offers" 
    newMessage['From'] = Sender_Email                   
    newMessage['To'] = Reciever_Email                   
    newMessage.set_content("Flat 30% off on Laptops. Hurry up! Avail the offers and upgrade your gadgets.\nThank you") 

    with open('/content/drive/MyDrive/Colab Notebooks/Laptop.jpeg', 'rb') as f:
        image_data = f.read()
        image_type = imghdr.what(f.name)
        image_name = f.name

    newMessage.add_attachment(image_data, maintype='image', subtype=image_type, filename=image_name)

    with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
    
        smtp.login(Sender_Email, Password)              
        smtp.send_message(newMessage)

def sendingEmail_C3_new(em):
    import smtplib
    import imghdr
    from email.message import EmailMessage

    Sender_Email = "lucymissionhale@gmail.com"
    Reciever_Email = em
    Password = "LucyMissionHale"

    newMessage = EmailMessage()                         
    newMessage['Subject'] = "Check out the new offers" 
    newMessage['From'] = Sender_Email                   
    newMessage['To'] = Reciever_Email                   
    newMessage.set_content("Mesmerizing Discounts on Smart Phones. Hurry up! Avail the offers.\nThank you") 

    with open('/content/drive/MyDrive/Colab Notebooks/SmartPhone.jpeg', 'rb') as f:
        image_data = f.read()
        image_type = imghdr.what(f.name)
        image_name = f.name

    newMessage.add_attachment(image_data, maintype='image', subtype=image_type, filename=image_name)

    with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
    
        smtp.login(Sender_Email, Password)              
        smtp.send_message(newMessage)

def sendingEmail_C4_new(em):
    import smtplib
    import imghdr
    from email.message import EmailMessage

    Sender_Email = "lucymissionhale@gmail.com"
    Reciever_Email = em
    Password = "LucyMissionHale"

    newMessage = EmailMessage()                         
    newMessage['Subject'] = "Check out the new offers" 
    newMessage['From'] = Sender_Email                   
    newMessage['To'] = Reciever_Email                   
    newMessage.set_content("Flat 40% off on Books. Hurry up! Avail the offers and explore the knowledge.\nThank you") 

    with open('/content/drive/MyDrive/Colab Notebooks/bookOffer.jpeg', 'rb') as f:
        image_data = f.read()
        image_type = imghdr.what(f.name)
        image_name = f.name

    newMessage.add_attachment(image_data, maintype='image', subtype=image_type, filename=image_name)

    with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
    
        smtp.login(Sender_Email, Password)              
        smtp.send_message(newMessage)

def existingCustomer(Email):
  all = allClustersData()
  cl1Emails = all[0]['Email'].tolist()
  cl2Emails = all[1]['Email'].tolist()
  cl3Emails = all[2]['Email'].tolist()
  cl4Emails = all[3]['Email'].tolist()
  clsMostPro = []
  exPro = ['Headphones', 'Laptop', 'Decor', 'Smartphone', 'Books']
  for i in range(4):
    cl_pro = all[i]['Products'].tolist()
    count = []
    for j in exPro:
      count.append(cl_pro.count(j))
    clsMostPro.append(exPro[count.index(max(count))])
  if Email in cl1Emails:
    sendingEmail_C1_new(Email)
    return clsMostPro[0]
  elif Email in cl2Emails:
    sendingEmail_C2_new(Email)
    return clsMostPro[1]
  elif Email in cl3Emails:
    sendingEmail_C3_new(Email)
    return clsMostPro[2]
  elif Email in cl4Emails:
    sendingEmail_C4_new(Email)
    return clsMostPro[3]
  else:
    return "Sorry you are not an existing Customer please refer the other section to know the offer details"+"\n"+"Thankyou"
  print(1)
    
  print(clsMostPro)
#print(existingCustomer('18wh1a0529@bvrithyderabad.edu.in'))

def nonExistingCustomer(age,SS):
  #print(age,ss)
  all = allClustersData()
  cl1Age = all[0]['Age'].tolist()
  cl2Age = all[1]['Age'].tolist()
  cl3Age = all[2]['Age'].tolist()
  cl4Age = all[3]['Age'].tolist() 
  #print(cl1Age)
  #print(cl2Age)
  cl1SS = all[0]['Spending Score (1-100)'].tolist()
  cl2SS = all[1]['Spending Score (1-100)'].tolist()
  cl3SS = all[2]['Spending Score (1-100)'].tolist()
  cl4SS = all[3]['Spending Score (1-100)'].tolist()
  clsMostPro = []
  exPro = ['Headphones', 'Laptop', 'Decor', 'Smartphone', 'Books']
  for i in range(4):
    cl_pro = all[i]['Products'].tolist()
    count = []
    for j in exPro:
      count.append(cl_pro.count(j))
    clsMostPro.append(exPro[count.index(max(count))])
  if age in cl1Age:
    #sendingEmail(cl1Emails)
    return clsMostPro[0]
  elif age in cl2Age:
    #sendingEmail(cl2Emails)
    return clsMostPro[1]
  elif age in cl3Age:
    #sendingEmail(cl3Emails)
    return clsMostPro[2]
  elif age in cl4Age:
    #sendingEmail(cl4Emails)
    return clsMostPro[3]
  else:
   return "No specific offers present for the given attributes look into all the offers"
#print(nonExistingCustomer(50,75))

pip install pillow

import cv2
from google.colab.patches import cv2_imshow
img1 = cv2. imread("/content/drive/MyDrive/Colab Notebooks/Headphone.jpeg")
img2 = cv2. imread("/content/drive/MyDrive/Colab Notebooks/Decor.jpeg")
img3 = cv2. imread("/content/drive/MyDrive/Colab Notebooks/Laptop.jpeg")
img4 = cv2. imread("/content/drive/MyDrive/Colab Notebooks/SmartPhone.jpeg")
img5 = cv2. imread("/content/drive/MyDrive/Colab Notebooks/bookOffer.jpeg")
print("Welcome to Smart Selling")
print("You are ready to avail and know the existing offers on your Intrested Items")
resp = input('Are you an existing customer (YES/NO):  ')
LaptopOff = ["Flat 30% off on Laptops. Hurry up! Avail the offers and upgrade your gadgets.\nThank you",img3]
DecorOff = ["Flat 50% off on Decorative Items. Hurry up! Avail the offers.\nThank you",img2]
SmartPhOff = ["Mesmerizing Discounts on Smart Phones. Hurry up! Avail the offers.\nThank you",img4]
BookOff = ["Flat 40% off on Books. Hurry up! Avail the offers and explore the knowledge.\nThank you",img5]
HeadPhOff = ["Amaizing Discounts on Headphones. Hurry up! Avail the offers.\nThank you",img1]
if resp.lower() == 'yes':
  email = input('Please Enter your Email Id which you have registered with us while purchasing things: ')
  pro = existingCustomer(email)
  if pro == "Laptop":
    for i in range(len(LaptopOff)):
      #print(LaptopOff[i])
      cv2_imshow(LaptopOff[1])
      print("The offer details has been sent to your email id for your reference")
  elif pro == "Headphones":
    for i in HeadPhOff:
      #print(HeadPhOff[0])
      cv2_imshow(HeadPhOff[1])
      print("The offer details has been sent to your email id for your reference")
  elif pro == "Decor":
    for i in DecorOff:
      #print(DecorOff[0])
      cv2_imshow(DecorOff[1])
      print("The offer details has been sent to your email id for your reference")
  elif pro == "Smartphone":
    for i in SmartPhOff:
      #print(i)
      cv2_imshow(SmartPhOff[1])
      print("The offer details has been sent to your email id for your reference")
  elif pro == "Books":
    for i in BookOff:
      #print(i)
      cv2_imshow(BookOff[1])
      print("The offer details has been sent to your email id for your reference")
  else:
    print(pro)
else:
  res = input('Do you want to look into the available offers present (YES/NO): ')
  if res.lower() == "yes":
      age =  int(input('Please enter your age: '))
      ss = input('Please enter your budget of amount that you want to spend on the respective item(in thounsands rupees): ')
      ss1 = (int(ss))//100
      pro = nonExistingCustomer(age,ss1)
      if(pro == "Decor"):
          cv2_imshow(DecorOff[1])
      elif(pro == "Headphones"):
          cv2_imshow(HeadPhOff[1])
      elif(pro == "Laptop"):
          cv2_imshow(LaptopOff[1])
      elif(pro == "SmartPhone"):
          cv2_imshow(SmartPhOff[1])
      else:
          cv2_imshow(BookOff[1])
  else:
        print("Thank you")

